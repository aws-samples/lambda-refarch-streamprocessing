AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: "Template to set up Kinesis stream, Lambda functions, S3 bucket, DynamoDB table and related IAM roles for AWS Lambda Real-time Stream Processing Reference Architecture."

# Parameters: 
#   LambdaS3Bucket: 
#     Type: String
#     Default: awslambda-reference-architectures
#     Description: Name of S3 bucket where Lambda function packages are stored.
#   LambdaEventStreamConsumerS3Key:
#     Type : String
#     Default : stream-processing/ddb_eventprocessor.zip
#     Description : Name of S3 key for Zip with Stream Processing DynamoDB Event Processor Lambda function package.
#   LambdaEventStreamConsumerHandler:
#     Type : String
#     Default : ddb_eventprocessor.handler
#     Description : Name of handler for Stream Processing DynamoDB Event Processor Lambda function.
Parameters: 
  # https://developer.twitter.com/en/docs/trends/trends-for-location/api-reference/get-trends-place
  # Yahoo! Where on Earth ID (WOEID)
  WhereOnEarthID:
    Description: Yahoo! Where on Earth ID (1=Global)
    Type: String
    Default: 1

Resources:

  #########################################################################################################
  # Event Stream
  #   - Creates the Amazon Kinesis Stream resources
  #########################################################################################################
  EventStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
  
  #########################################################################################################
  # Event Stream Producer - Python
  #   - Creates a Lambda function in Phython which polls Twitter for new tweets and adds them to
  #     the Amazon Kinesis stream.
  #########################################################################################################
  EventStreamProducerPython:
    Type: AWS::Serverless::Function
    Properties:
      Description: Scrape twitter and put events into Kinesis
      FunctionName: !Sub ${AWS::StackName}-EventStreamProducerPython
      MemorySize: 512
      Role: !GetAtt EventStreamProducerPythonExecutionRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: INFO
          KINESIS_STREAM_NAME: !Ref EventStream
          WOEID: !Ref WhereOnEarthID
      Timeout: 900
      Runtime: python3.7
      CodeUri: src/lambda/producer-python
      Handler: main.lambda_handler
      Events:
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
        TriggerProducerLambda:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
            Name: trigger-kinesis-event-producer
            Description: trigger kinesis event producer every 5 minutes 
            Enabled: True

  EventStreamProducerPythonExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EventStreamProducerPythonExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-EventStreamProducerPythonExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                Resource: !GetAtt EventStream.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
  
  #########################################################################################################
  # Event Stream Producer - Java
  #   - Creates a Lambda function in Java which polls Twitter for new tweets and adds them to
  #     the Amazon Kinesis stream.
  #########################################################################################################
  EventStreamProducerPython:
    Type: AWS::Serverless::Function
    Properties:
      Description: Scrape twitter and put events into Kinesis
      FunctionName: !Sub ${AWS::StackName}-EventStreamProducerJava
      MemorySize: 512
      Role: !GetAtt EventStreamProducerJavaExecutionRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: INFO
          KINESIS_STREAM_NAME: !Ref EventStream
          WOEID: !Ref WhereOnEarthID
      Timeout: 60
      Runtime: Java8
      CodeUri: src/lambda/producer-java-kpl/KPLProducer/target/KPLProducer-1.0.jar
      Handler: kplproducer.KPLProducer::handleRequest
      Events:
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
        TriggerProducerLambda:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Name: trigger-kinesis-event-producer-java
            Description: trigger kinesis event producer every 5 minutes 
            Enabled: True

  EventStreamProducerPythonExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EventStreamProducerJavaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-EventStreamProducerJavaExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                Resource: !GetAtt EventStream.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  #########################################################################################################
  # Event Data Table
  #   - Creates a DyanmoDB table where the streaming data will be persisted.
  #   - The table will use On-Demand pricing and have TTL enabled.
  #   - The TTL variable will prevent unexpected storage costs by removing stale items after 1 day
  #     (per EventStreamConsumer Lambda configuraiton)
  #########################################################################################################
  EventDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-EventData
      AttributeDefinitions:
        - AttributeName: Username
          AttributeType: S
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Username
          KeyType: HASH
        - AttributeName: Id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ExpirationTime
        Enabled: true

  #########################################################################################################
  # Event Stream Consumer
  #   - Creates a Lambda function in Node.js which reads from the Kinesis Stream in batches of 25 items
  #     and persists the stream records into a DynamoDB table.
  #########################################################################################################
  EventStreamConsumer:
    Type: AWS::Serverless::Function
    Properties:
      Description: Stream Processing DDB Event Processor
      FunctionName: !Sub ${AWS::StackName}-EventStreamConsumer
      Role: !GetAtt EventStreamConsumerExecutionRole.Arn
      MemorySize: 128
      Timeout: 20
      Environment:
        Variables:
          DDB_TABLE: !Ref EventDataTable
          DDB_TTL_DAYS: 1
      Runtime: nodejs10.x
      CodeUri: src/lambda/consumer
        # Bucket: !Ref LambdaS3Bucket
        # Key: !Ref LambdaEventStreamConsumerS3Key
      Handler: ddb_eventprocessor.handler
      # Handler: !Ref LambdaEventStreamConsumerHandler
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt EventStream.Arn
            StartingPosition: TRIM_HORIZON
            BatchSize: 25

  EventStreamConsumerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EventStreamConsumerExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-EventStreamConsumerExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource: !GetAtt EventDataTable.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

#########################################################################################################
# Stack Outputs
#########################################################################################################
Outputs:
  Region:
    Value: !Ref AWS::Region
  EventStreamName:
    Value: !Ref EventStream
    Description: The Amazon Kinesis stream name.
  EventStreamArn:
    Value: !GetAtt EventStream.Arn
    Description: The Amazon Kinesis stream ARN.
  EventDataTableName:
    Value: !Ref EventDataTable
  EventDataTableArn:
    Value: !GetAtt EventDataTable.Arn
